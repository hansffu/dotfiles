#+TITLE: Personal emacs config

* Setup
** Doom setup
#+INCLUDE: "./personal.el" src emacs-lisp

#+BEGIN_SRC emacs-lisp

;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
(setq doom-font (font-spec :family "monospace" :size 14))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Dropbox/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
;; they are implemented.

(setq mac-option-key-is-meta nil)
(setq mac-command-key-is-meta t)
(setq mac-command-modifier 'meta)
(setq mac-option-modifier nil)
#+END_SRC
* Keybindings
** Easymotion
#+BEGIN_SRC emacs-lisp
#+END_SRC
* Plugin configuration
** Org mode
*** org-agenda
#+BEGIN_SRC emacs-lisp
(defun refresh-org-agenda-files ()
  (setq org-agenda-files (directory-files-recursively org-directory "\.org$")))

(defun refresh-org-agenda-advice (orig-fun &rest args)
  (message "Refresh org-agenda files")
  (refresh-org-agenda-files)
  (apply orig-fun args))

(after! org-agenda
  (advice-add  'org-agenda-redo :around #'refresh-org-agenda-advice)
  (refresh-org-agenda-files))
#+END_SRC
*** org-capture
#+BEGIN_SRC emacs-lisp
(defvar +org-capture-inbox-file "inbox.org")

(after! org-capture
  (setq org-default-notes-file
        (expand-file-name +org-capture-notes-file org-directory)
        +org-capture-journal-file
        (expand-file-name +org-capture-journal-file org-directory)))
#+END_SRC
**** Templates
***** Template strings
#+BEGIN_SRC emacs-lisp
(defvar my/org-template-todo-string "** TODO %?\n%i\n%a")
(defvar my/org-template-note-string "* %U %?\n %i\n %a")
#+END_SRC

***** Personal
****** todo
#+BEGIN_SRC emacs-lisp
(defvar my/org-template-personal-todo
  '("Personal todo"
    entry (file+headline +org-capture-todo-file "Inbox")
    "** TODO %?\n%i\n%a"
    :prepend t))
#+END_SRC
****** note
#+BEGIN_SRC emacs-lisp
(defvar my/org-template-personal-note
  '("Personal notes"
    entry (file org-default-notes-file)
    "* %U %?\n %i\n %a"))
#+END_SRC
***** Work
#+BEGIN_SRC emacs-lisp
(defun +org-capture-central-work-file ()
  "File for project notes and tasks"
  (+org--capture-central-file
   "work.org" (projectile-project-name)))
#+END_SRC
****** todo
#+BEGIN_SRC emacs-lisp
(defvar my/org-template-work-todo
  '("Project todo"
    entry (function +org-capture-central-work-file)
    "** TODO %?\n%i\n%a"
    :heading "Tasks" :prepend nil)
  )
#+END_SRC
****** note
#+BEGIN_SRC emacs-lisp
(defvar my/org-template-work-note
  '("Project notes"
    entry (function +org-capture-central-work-file)
    "* %U %?\n %i\n %a"
    :heading "Notes" :prepend t)
  )
#+END_SRC
***** Update list
#+BEGIN_SRC emacs-lisp
(after! org-capture
  (setq org-capture-templates
        (list
         (cons "t" my/org-template-personal-todo )
         (cons "n" my/org-template-personal-note)

         '("w" "Work")
         (cons "wt" my/org-template-work-todo)
         (cons "wn" my/org-template-work-note)
         )))
#+END_SRC
*** org-depend
#+BEGIN_SRC emacs-lisp
(after! org
  (require 'org-depend))
#+END_SRC
** Mail (mu4e)
#+INCLUDE: "./email.el" src emacs-lisp
* Languages
** typescript
#+BEGIN_SRC emacs-lisp
(after! typescript
  (setq typescript-indent-level 2))
#+END_SRC
** Rescript (ReasonML)
#+BEGIN_SRC emacs-lisp
(use-package! reason-mode
  :mode ("\\.re?s\\'" . reason-mode)
  :config
  (after! lsp-mode
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection "/usr/bin/reason-language-server")
                      :major-modes '(reason-mode)
                      :notification-handlers (ht ("client/registerCapability" 'ignore))
                      :priority 1
                      :server-id 'reason-ls)))

  (add-hook 'reason-mode-local-vars-hook #'lsp!)
  )
#+END_SRC
** GraphQL
#+BEGIN_SRC emacs-lisp
(use-package! graphql-mode)
#+END_SRC
* Fun
** Speed types
#+BEGIN_SRC
(use-package! speed-type)
#+END_SRC

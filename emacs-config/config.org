* Setup
** Package management
#+BEGIN_SRC emacs-lisp
(package-initialize)

;;Install packages automatically
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(setq package-enable-at-startup nil)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(add-to-list 'load-path "~/.emacs.d/lisp/")
;;move custom variables out of the way
(setq custom-file "~/.emacs.d/custom.el")
#+END_SRC

** System packages
#+BEGIN_SRC emacs-lisp
  (use-package system-packages
    :ensure t)

  (use-package use-package-ensure-system-package
    :ensure t)
#+END_SRC
** Turn off unneeded ui elements
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (global-linum-mode 1)
  (tool-bar-mode -1)
;  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq ring-bell-function 'ignore)
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;(add-to-list 'default-frame-alist '(ns-appearance . dark))
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
#+END_SRC

** Rebind some keys
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-.") 'next-error)
  
  (setq mac-option-key-is-meta nil)
  (setq mac-command-key-is-meta t)
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier nil)
#+END_SRC
** Save backup files out of the way
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `((".*" . ,temporary-file-directory))
	auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
	backup-by-copying t    ; Don't delink hardlinks
	version-control t      ; Use version numbers on backups
	delete-old-versions t  ; Automatically delete excess backups
	kept-new-versions 20   ; how many of the newest versions to keep
	kept-old-versions 5    ; and how many of the old
	)
#+END_SRC

* Appearance
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(default ((t (:inherit nil :stipple nil :background "#222D32" :foreground "#eeffff" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 110 :width normal :foundry "nil" :family "Iosevka")))))
#+END_SRC

** Powerline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
	:ensure t
	:defer t
	:hook (after-init . doom-modeline-init))

  (use-package all-the-icons
    :ensure t)
#+END_SRC
** Fonts
#+BEGIN_SRC emacs-lisp
  (cond 
   ((find-font (font-spec :name "Hack"))
    (set-frame-font "Hack-12"))
   ((find-font (font-spec :name "Iosevka Medium"))
    (set-frame-font "Iosevka Medium-13"))
   ((find-font (font-spec :name "DejaVu Sans Mono for Powerline"))
    (set-frame-font "DejaVu Sans Mono for Powerline-12"))
   ((find-font (font-spec :name "DejaVu Sans Mono"))
    (set-frame-font "DejaVu Sans Mono-12"))
   ((find-font (font-spec :name "courier"))
    (set-frame-font "courier-12")))
 

#+END_SRC
* Evil keybindings
** Pure evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :after (general)
    :init ;; tweak evil's configuration before loading it
    (setq evil-search-module 'evil-search)
    (setq evil-ex-complete-emacs-commands nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-shift-round nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1)
    (general-evil-setup))

  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-escape
    :ensure t
    :after evil
    :init
    (setq-default evil-escape-key-sequence "jk")
    (setq-default evil-escape-delay 0.2)
    :config
    (evil-escape-mode))
#+END_SRC
** Custom keybindings
*** Keybinding packages
    Add general and hydra plugins to help set up keybindings
#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t)

  (use-package hydra
    :ensure t)
#+END_SRC
*** Top level keybindings
    These keybindings are directly behind space
    #+BEGIN_SRC emacs-lisp
      (general-create-definer space-binding
	;; :prefix my-leader
	:prefix "SPC"
	:states '(normal))

      (general-create-definer my-local-leader-def
	;; :prefix my-local-leader
	:prefix "SPC m")

      (space-binding 
	"TAB" '(switch-to-prev-buffer :wk "previous buffer")
	"SPC" '(helm-M-x :wk "M-x")
	"bl"  '(helm-mini :wk "buffers list"))
    #+END_SRC
*** Files 
    #+BEGIN_SRC emacs-lisp
      (space-binding
	"f" '(:wk "Files")
	"ft"  '(neotree-toggle :wk "toggle neotree"))
    #+END_SRC
*** Window
#+BEGIN_SRC emacs-lisp
  (space-binding
    "w" '(:wk "windows and frames")
    "w/" '(split-window-right :wk "split right")
    "w-" '(split-window-below :wk "split bottom")
    "wk" '(delete-window :wk "delete window")
    "wz" '(delte-frame :wk "delete frame")
    "wr" '(hydra-window-resize/body :wk "resize windows")
    "wq" '(kill-emacs :wk "quit"))

  (defhydra hydra-window-resize (:color red)
    ("j" enlarge-window "enlarge vertically")
    ("k" shrink-window "shrink vertically")
    ("h" enlarge-window-horizontally "enlarge vertically")
    ("l" shrink-window-horizontally "shrink vertically"))
#+END_SRC
*** Goto/find
    #+BEGIN_SRC emacs-lisp
      (space-binding
       "g" '(:wk "goto/find")
       "gr" '(xref-find-references :wk "find references")
       "gd" '(xref-find-definitions :wk "find definitions")
       "gb" '(xref-pop-marker-stack :wk "go back"))
    #+END_SRC
*** Avy
    #+BEGIN_SRC emacs-lisp
      (general-nmap
	:prefix "g"
	"c" 'avy-goto-char-2
	"l" 'avy-goto-line
	"w" 'avy-goto-word-1)
      (general-omap
	:prefix "g"
	"c" 'evil-avy-goto-char-2
	"l" 'evil-avy-goto-line
	"w" 'evil-avy-goto-word-1)
    #+END_SRC
*** Project management
    #+BEGIN_SRC emacs-lisp
      (space-binding
	"p"  '(:wk "Project managemen")
	"pP" '(projectile-command-map :wk "Projectile")
	"pf" '(helm-projectile-find-file :wk "Find file")
	"pp" '(helm-projectile-switch-project :wk "Switch project")
	"ps" '(helm-projectile-ag :wk "Search")
	"pb" '(helm-projectile-switch-to-buffer :wk "Switch buffer")
	"p SPC" '(helm-projectile :wk "Find anything")
	"pg" '(projectile-vc :wk "Git"))
    #+END_SRC
* Plugins
** Utilities
#+BEGIN_SRC emacs-lisp
  (use-package ag
    :ensure t
    :ensure-system-package (ag . the_silver_searcher))

  (use-package helm-ag
    :ensure t
    :after '(helm ag))

  (use-package helm-xref
    :ensure t
    :init
    (setq xref-show-xrefs-function 'helm-xref-show-xrefs))
#+END_SRC
** Git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))

  (use-package magit-popup
    :ensure t
    :requires magit)

  (use-package evil-magit
    :ensure t
    :requires (evil magit magit-popup))
#+END_SRC

** Parentheses
To keep control of parantheses
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :hook (prog-mode . enable-paredit-mode)
    :bind
    (("{" . paredit-open-curly)
     ("}" . paredit-close-curly)))

  (use-package evil-cleverparens
    :ensure t
    :init   (add-hook 'paredit-mode-hook 'evil-cleverparens-mode)
    :config (setq evil-cleverparens-swap-move-by-word-and-symbol t))

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (progn
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))

  (require 'cl-lib)
  (require 'color)
  (cl-loop
   for index from 1 to rainbow-delimiters-max-face-count
   do
   (let ((face (intern (format "rainbow-delimiters-depth-%d-face" index))))
     (cl-callf color-saturate-name (face-foreground face) 40)))
#+END_SRC

** Utilities
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish which-key-mode
  :config
  (add-hook 'after-init-hook 'which-key-mode))

(use-package undo-tree
  :ensure t
  :defer 5
  :diminish global-undo-tree-mode
  :config
  (global-undo-tree-mode 1))

#+END_SRC

** HELM
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind (("M-x" . helm-M-x)
	   ("C-x C-f" . helm-find-files)
	   ("M-y" . helm-show-kill-ring)
	   ("C-x b" . helm-buffers-list))
    :init
    (setq helm-mode-fuzzy-match t
	  helm-completion-in-region-fuzzy-match t
	  helm-buffers-fuzzy-matching t
	  helm-M-x-fuzzy-match t
	  helm-imenu-fuzzy-match t
	  helm-locate-fuzzy-match t
	  helm-semantic-fuzzy-match t
	  helm-lisp-completion-at-point t
	  helm-split-window-in-side-p t
	  helm-ff-search-library-in-sexp t
	  helm-ff-file-name-history-use-recentf t
	  helm-echo-input-in-header-line t)
    :config
    (helm-mode 1))

  (use-package swiper-helm
    :ensure t
    :bind (("C-s" . swiper-helm)))



#+END_SRC
** Navigation
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind (("C-," . avy-goto-word-1)
	   ("C-'" . avy-goto-char)))

  (use-package crux
    :ensure t
    :bind (("C-a" . crux-move-beginning-of-line)))
#+END_SRC
Easier window navigation
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :bind* ("M-o" . ace-window)
    :init (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
  (global-set-key (kbd "M-o") 'ace-window)
#+END_SRC
Multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :init
    (setq mc/always-run-for-all t)
    :bind
    (("M-j" . mc/mark-next-like-this-word)
     ("C-c m j" . mc/mark-next-like-this-word)
     ("C-c m h" . mc/mark-all-like-this)
     ("C-c m a" . mc/edit-beginnings-of-lines)
     ("C-c m m" . mc/edit-lines)))

#+END_SRC

** Projectile project management
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (setq projectile-keymap-prefix (kbd "C-c p"))
    :config
    (projectile-mode)
    (setq projectile-completion-system 'helm))

  (use-package helm-projectile
    :ensure t
    :config
    (helm-projectile-on))


#+END_SRC

** File browser
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :init
    (setq neo-smart-open t)
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    :config
    (global-set-key (kbd "C-c t") 'neotree-toggle))

#+END_SRC

** Auto complete in code
#+BEGIN_SRC emacs-lisp
  ;; (use-package company
  ;;   :ensure t
  ;;   :bind (("C-å" . company-complete))
  ;;   :diminish
  ;;   :config
  ;;   (add-hook 'after-init-hook 'global-company-mode)
  ;;   (setq company-idle-delay t))
  ;; (global-company-mode 1)


  (use-package company
    :ensure t
    :diminish ""
    :bind (("C-å" . company-complete))
    :init
    (add-hook 'prog-mode-hook 'company-mode)
    ;; (add-hook 'comint-mode-hook 'company-mode)
    :config
    (global-company-mode)
    (setq company-tooltip-limit 10)
    (setq company-dabbrev-downcase 0)
    (setq company-idle-delay 0)
    (setq company-echo-delay 0)
    (setq company-minimum-prefix-length 2)
    (setq company-require-match nil)
    (setq company-selection-wrap-around t)
    (setq company-tooltip-align-annotations t)
    ;; (setq company-tooltip-flip-when-above t)
    (setq company-transformers '(company-sort-by-occurrence)) ; weight by frequency
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-å") 'company-complete)
    (define-key company-active-map (kbd "C-j") 'company-select-next)
    (define-key company-active-map (kbd "C-k") 'company-select-previous)
    (define-key company-active-map (kbd "TAB") 'company-complete--or-cycle)
    (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)
    (define-key company-active-map (kbd "RET") 'company-complete-selection)
    (define-key company-active-map (kbd "S-TAB") 'company-select-previous)
    (define-key company-active-map (kbd "<backtab>") 'company-select-previous))

  (use-package company-lsp
    :ensure t
    :init
    (push 'company-lsp company-backends)
    :after (company lsp))

  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode))
#+END_SRC

** Flycheck for lint
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-flycheck-mode)
    (add-hook 'flycheck-mode-hook 'jc/use-eslint-from-node-modules)
    (add-to-list 'flycheck-checkers 'proselint)
    (setq-default flycheck-highlighting-mode 'lines)
    ;; Define fringe indicator / warning levels
    (define-fringe-bitmap 'flycheck-fringe-bitmap-ball
      (vector #b00000000
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00011100
	      #b00111110
	      #b00111110
	      #b00111110
	      #b00011100
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00000000))
    (flycheck-define-error-level 'error
      :severity 2
      :overlay-category 'flycheck-error-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-error)
    (flycheck-define-error-level 'warning
      :severity 1
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-warning)
    (flycheck-define-error-level 'info
      :severity 0
      :overlay-category 'flycheck-info-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-info))

;  (use-package lsp-ui
;    :ensure t
;    :hook (lsp-mode . lsp-ui-mode))
#+END_SRC

** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :defer t
    :config
    (require 'lsp-clients)
    (add-hook 'web-mode-hook 'lsp))


  (use-package lsp-ui
    :ensure t
    :bind
    (("M-RET" . lsp-ui-sideline-apply-code-actions))
    :commands lsp-ui-mode)
  (use-package company-lsp
    :ensure t
    :commands company-lsp)
#+END_SRC
** Web
*** JS, React and Web mode
#+BEGIN_SRC emacs-lisp
  (setq-default js-indent-level 2)

  (use-package js2-mode
    :ensure t
    :bind (:map js2-mode-map
		("M-." . nil)
		("C-c C-s" . nil))
    :mode "\\.js\\'"
    :config
    (setq-default js2-ignored-warnings '("msg.extra.trailing.comma")))

  (use-package js2-refactor
    :ensure t
    :config
    (js2r-add-keybindings-with-prefix "C-c C-m")
    (add-hook 'js2-mode-hook 'js2-refactor-mode))

  (use-package xref-js2
    :ensure t
    :init (add-hook
	   'js2-mode-hook
	   (lambda ()
	     (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))

  ;; (use-package rjsx-mode
  ;;   :ensure t
  ;;   :config
  ;;   (add-to-list 'magic-mode-alist 
  ;; 	 '("\\(import.*from \'react\';\\|\/\/ @flow\nimport.*from \'react\';\\)" . rjsx-mode)))

  (use-package web-mode
    :ensure t
    :mode (("\\.html?\\'" . web-mode)
	   ("\\.tsx\\'" . web-mode)
	   ("\\.jsx\\'" . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2
	  web-mode-css-indent-offset 2
	  web-mode-code-indent-offset 2
	  web-mode-block-padding 2
	  web-mode-comment-style 2
	
	  web-mode-enable-css-colorization t
	  web-mode-enable-auto-pairing t
	  web-mode-enable-comment-keywords t
	  web-mode-enable-current-element-highlight t
	  web-mode-enable-auto-indentation nil))

  (add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 2)))
  (add-hook 'rjsx-mode-hook (lambda () (setq js2-basic-offset 2)))

  (defun jc/use-eslint-from-node-modules ()
    "Set local eslint if available."
    (let* ((root (locate-dominating-file
		  (or (buffer-file-name) default-directory)
		  "node_modules"))
	   (eslint (and root
			(expand-file-name "node_modules/eslint/bin/eslint.js"
					  root))))
      (when (and eslint (file-executable-p eslint))
	(setq-local flycheck-javascript-eslint-executable eslint))))


  ;; (use-package lsp-javascript-typescript
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'js-mode-hook #'lsp-javascript-typescript-enable)
  ;;   (add-hook 'typescript-mode-hook #'lsp-javascript-typescript-enable)
  ;;   (add-hook 'js3-mode-hook #'lsp-javascript-typescript-enable)
  ;;   (add-hook 'rjsx-mode #'lsp-javascript-typescript-enable))

  (defun my-company-transformer (candidates)
    (let ((completion-ignore-case t))
      (all-completions (company-grab-symbol) candidates)))

  (defun my-js-hook nil
    (make-local-variable 'company-transformers)
    (push 'my-company-transformer company-transformers))

  (add-hook 'js-mode-hook 'my-js-hook)
#+END_SRC
**** Typescript
#+BEGIN_SRC emacs-lisp
  (setq-default typescript-indent-level 2)
    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.ts\\'" . web-mode))

  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (company-mode +1))

  (use-package tide
    :disabled
    :ensure t
    :init

    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
    (add-hook 'web-mode-hook
             (lambda ()
               (when (string-equal "tsx" (file-name-extension buffer-file-name))
                 (setup-tide-mode))))
    ;; enable typescript-tslint checker
    (flycheck-add-mode 'typescript-tslint 'web-mode)
    )


  (defun tide-annotate-completions (completions prefix file-location)
    (-map
     (lambda (completion)
       (let ((name (plist-get completion :name)))
        (put-text-property 0 1 'file-location file-location name)
        (put-text-property 0 1 'completion completion name)
        name))
     (-sort
      'tide-compare-completions
      (-filter
       (let ((member-p (tide-member-completion-p prefix)))
        (lambda (completion)
          (and (string-prefix-p prefix (plist-get completion :name))
               (or (not member-p)
                   (member (plist-get completion :kind) '("warning" "export" "method" "property" "getter" "setter"))))))
       completions))))
#+END_SRC
*** Code format on save
Uses prettier. Install with npm install -g prettier
#+BEGIN_SRC emacs-lisp
  (use-package prettier-js
    :ensure t
    :config
    (setq prettier-js-args '(
                          "--trailing-comma" "es5"
                          "--single-quote" "true"
                          "--print-width" "100"
                          ))
    (add-hook 'js2-mode-hook 'prettier-js-mode)
    (add-hook 'rjsx-mode-hook 'prettier-js-mode)
    (add-hook 'web-mode-hook 'prettier-js-mode)
    (add-hook 'scss-mode-hook 'prettier-js-mode))

  (defun jc/use-eslint-from-node-modules ()
    "Set local eslint if available."
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (and root
                        (expand-file-name "node_modules/eslint/bin/eslint.js"
                                          root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint))))


#+END_SRC

** REST
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t)

  (use-package company-restclient
    :ensure t
    :config
    (add-to-list 'company-backends 'company-restclient))
#+END_SRC
** ELM
#+BEGIN_SRC emacs-lisp
(use-package elm-mode
  :ensure t
  :config
  (setq elm-format-on-save t)
  (add-hook 'elm-mode-hook #'elm-oracle-setup-completion)
  (add-to-list 'company-backends 'company-elm)
  (use-package flycheck-elm
    :ensure t
    :config
    (add-hook 'flycheck-mode-hook 'flycheck-elm-setup)
    (add-hook 'elm-mode-hook #'flycheck-mode)))
#+END_SRC

** Org mode
#+BEGIN_SRC emacs-lisp
  ;prettier bullets
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook 'org-bullets-mode))

#+END_SRC

** COMMENT EXWM - Emacs window manager (Disabled)
#+BEGIN_SRC emacs-lisp
  (use-package exwm
    :ensure t
    :bind
    (("s-a" . async-shell-command))
    :config
    (require 'exwm-config)
    (exwm-config-default))

#+END_SRC

** Docker
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :config
    (require 'dockerfile-mode)
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))

  (use-package docker
    :ensure t)

  (use-package docker-compose-mode
    :ensure t)
#+END_SRC
** Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :mode "\\.hs\\'"
    :commands haskell-mode
    :bind ("C-c C-s" . fix-imports)
    :config
    (custom-set-variables
     '(haskell-ask-also-kill-buffers nil)
     '(haskell-process-type (quote stack-ghci))
     '(haskell-interactive-popup-errors nil))

    (add-hook 'haskell-mode-hook 'haskell-indentation-mode)
    (add-hook 'haskell-mode-hook 'flycheck-mode)
    (add-hook 'haskell-mode-hook (lambda ()
				   (add-hook 'before-save-hook 'haskell-mode-format-imports nil 'local))))

  (use-package company-ghc
    :ensure t
    :config
    (add-to-list 'company-backends 'company-ghc)
    (custom-set-variables '(company-ghc-show-info t)))

  (use-package intero
    :ensure t
    :config
    (add-hook 'haskell-mode-hook 'intero-mode))
#+END_SRC
** Rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))

    (use-package flycheck-rust
      :ensure t
      :config
      (add-hook 'flycheck-mode-hook 'flycheck-rust-setup)
      (add-hook 'rust-mode-hook #'flycheck-mode)))

#+END_SRC
** Snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :hook (prog-mode . yas-minor-mode))

  (use-package yasnippet-snippets
    :ensure t
    :after yasnippet
    :requires yasnippet
    :config
    (yas-reload-all))


#+END_SRC
